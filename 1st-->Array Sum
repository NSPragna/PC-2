#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main(int argc, char* argv[])
{
int n;
cin>>n;
int a[n];
for(int i=0;i<n;i++)
{
    cin>>a[i];
    }
    

	int rank, page,
		ele,
		ele_rev;
	
	MPI_Status status;

	MPI_Init(&argc, &argv);

	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &process);
	if (rank == 0) {
		int index, i;
		ele= n / process;

	
		if (process > 1) {
			for (i = 1; i < process - 1; i++) {
				index = i * ele;

				MPI_Send(&ele,
						1, MPI_INT, i, 0,
						MPI_COMM_WORLD);
				MPI_Send(&a[index],
						ele,
						MPI_INT, i, 0,
						MPI_COMM_WORLD);
			}

			
			index = i * ele;
			int ele_left = n - index;

			MPI_Send(&ele_left,
					1, MPI_INT,
					i, 0,
					MPI_COMM_WORLD);
			MPI_Send(&a[index],
					elem_left,
					MPI_INT, i, 0,
					MPI_COMM_WORLD);
		}

	
		int sum = 0;
		for (i = 0; i < ele; i++)
			sum += a[i];

		int tmp;
		for (i = 1; i < np; i++) {
			MPI_Recv(&tmp, 1, MPI_INT,
					MPI_ANY_SOURCE, 0,
					MPI_COMM_WORLD,
					&status);
			int sender = status.MPI_SOURCE;

			sum += tmp;
		}

		printf("array sum is : %d\n", sum);

	else {
		MPI_Recv(&ele_rev,
				1, MPI_INT, 0, 0,
				MPI_COMM_WORLD,
				&status);

		MPI_Recv(&a2, ele_rev,
				MPI_INT, 0, 0,
				MPI_COMM_WORLD,
				&status);
		int p_sum = 0;
		for (int i = 0; i < ele_rev; i++)
			p_sum += a2[i];

		MPI_Send(&p_sum, 1, MPI_INT,
				0, 0, MPI_COMM_WORLD);
	}
	MPI_Finalize();

	return 0;
}
